
# Recipies for packing up and distributing the instrument source library.
# It's super simple so the package benefits from having only the sources,
# not the related article or maintainer stuff.

SOURCES = $(wildcard *.h *.c)

HTML_FILES = $(patsubst %.adoc,%.html,$(wildcard *.adoc))

$(HTML_FILES): %.html: %.adoc Makefile.maintainer
	gem which pygments   # Die if the syntax highlighter isn't installed
	asciidoctor -a stylesheet=asciidoc.css $<
	# Here's how to not use a style sheet:
	#asciidoctor -a stylesheet! $<

all_html_files.stamp: $(HTML_FILES)
	touch $@

.PHONY: view_document_root
view_document_root: all_html_files.stamp
	$(WEB_BROWSER) ditch_your_debugger.html

GIT_DESCRIPTION = `git describe --dirty --tags --always`

# Files to be shipped in the release tarball (i.e. non-maintainer-only files)
PACKING_LIST = Makefile $(SOURCES)

.PHONY: tarball
tarball: $(PACKING_LIST)
	# Requre VERSION variable to be set
	[ -n "$(VERSION)" ] || (echo VERSION not set 1>&2 && false)
	# Requre the git repo to be clean
	echo $(GIT_DESCRIPTION) | grep -v -e '-dirty'
	# Requre the git repo to be tagged with specified version
	[ "$(GIT_DESCRIPTION)" = "version_$(VERSION)" ]
	mkdir instrument-$(VERSION)
	cp $(PACKING_LIST) instrument-$(VERSION)
	tar czvf instrument-$(VERSION).tar.gz instrument-$(VERSION)/
	rm -rf instrument-$(VERSION)

# Web Host to upload to
WHOST = brittonk@box201.bluehost.com

# web Dir (on $(WHOST)) to upload to
WDIR = public_html/instrument

.PHONY: upload_tarball
upload_tarball: RELEASES_DIR = $(WDIR)/releases/
upload_tarball: RELEASES_SCP_TARGET = $(WHOST):$(RELEASES_DIR)
upload_tarball: RELEASE_FILE = instrument-$(VERSION).tar.gz
upload_tarball: RELEASE_PATH = $(RELEASES_DIR)/$(RELEASE_FILE)
upload_tarball: LATEST_LINK_PATH = $(RELEASES_DIR)/LATEST_IS_$(RELEASE_FILE)
upload_tarball: tarball
	# scp give a confusing warning if target dir !exist, so check first
	ssh $(WHOST) test -d $(RELEASES_DIR)
	scp instrument-$(VERSION).tar.gz $(RELEASES_SCP_TARGET)
	ssh $(WHOST) rm -f '$(RELEASES_DIR)/LATEST_IS_*'
	ssh $(WHOST) ln -s $(RELEASE_FILE) $(LATEST_LINK_PATH)

# NOTE: we aren't religious about making sure the uploaded HTML corresponds
# to any particular git-tagged release.
.PHONY: upload_html
upload_html: HTML_SCP_DIR = $(WHOST):$(WDIR)/
upload_html: $(HTML_FILES)
	ssh $(WHOST) rm -rf $(WDIR)/*.html
	scp $+ $(HTML_SCP_DIR)

.PHONY: upload
upload: upload_tarball upload_html

.PHONY: clean
clean:
	rm -f *.tar.gz all_html_files.stamp $(HTML_FILES)
